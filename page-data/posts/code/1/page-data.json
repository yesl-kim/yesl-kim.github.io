{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/code/1","result":{"data":{"markdownRemark":{"id":"d4ede81e-dea8-5757-bbe3-d1ca1b221b94","html":"<p>이번 프로젝트에서 검색, 필터, 정렬 기능을 위해 쿼리 파라미터를 사용해 api요청을 한 일이 있었다.</p>\n<p><strong>path parameter vs query parameter</strong></p>\n<p>이 둘은 모두 동적 라우팅을 위해 사용되지만, 패스 파라미터는 특정 리소스 하나를 지정해서 가져오는 경우에 주로 쓰이고 쿼리 파라미터는 페이지네이션이나 필터처럼 기준에 따라 리소스의 일부를 가져올 때 주로 쓰인다.</p>\n<p>패스 파라미터는 match.params의 프로퍼티로 담기기 때문에 각각의 값에 접근이 쉽지만, 지정된 파라미터에 값을 모두 전달하지 않으면 (예를 들어 category/:id/:example -> id와 example에 둘다 값을 전달하지 않으면) 라우팅이 올바르게 되지 않는다. 그래서 필터를 쓸 때는 쿼리 파라미터를 쓰는 것 같다. (필터를 체크할 수도 있고 안할 수도 있고~)</p>\n<p>다만 쿼리 파라미터는 location.search에 문자열로 한번에 다 담기기 때문에(‘?key=value&#x26;key2=value2…‘) 각각의 값에 접근하기 위해서는 따로 분리를 해줘야한다.</p>\n<hr>\n<p>프론트에서는 쿼리스트링을 객체로 변환해서 key값으로 사용하다가, 서버에 보내야 할 때 다시 쿼리스트링 형태(‘?<del>=</del>&#x26;~~“)로 보내주면 된다. 그래서 쿼리스트링 -> 객체, 객체 -> 쿼리스트링 으로 변환해주는 함수를 util 함수에 저장해놓고 필요할 때 꺼내쓰면 함수 재사용도 높이고, 추상화를 통해 코드 길이도 줄이고! 아주 편했기에 다시 한 번 정리해보고자 한다.</p>\n<p>방법은 1. 직접 함수를 만들거나 2. Web API인 <code class=\"language-text\">URLSearchParams</code>를 사용하는 방법이 있다.</p>\n<h2 id=\"직접-함수-작성하기\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"직접 함수 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직접 함수 작성하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// util.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">queryToObj</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  q<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">objToQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"?\"</span> <span class=\"token operator\">+</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>프로토타입을 사용해서 메소드로 만들어 사용할 수 있는데 그건 <a href=\"https://saengmotmi.netlify.app/mentoring/2020-10-31-%EC%BF%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A7%81-%ED%8C%8C%EC%8B%B1-%ED%95%A8%EC%88%98/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">요기</a> 참고<br>\n파싱 함수를 사용할 수도 있다는 걸 알려주신, 멘토님의 블로그다.</p>\n<br/>\n<h2 id=\"web-api-사용하기-urlsearchparams\" style=\"position:relative;\"><a href=\"#web-api-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-urlsearchparams\" aria-label=\"web api 사용하기 urlsearchparams permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web API 사용하기: <code class=\"language-text\">URLSearchParams</code></h2>\n<blockquote>\n<p>new URLSearchParams(<em>queryString</em>)</p>\n</blockquote>\n<ul>\n<li>쿼리스트링을 인자로 넘겨주면 URLSearchParams 객체 인스턴스 반환</li>\n<li>쿼리스트링에 대해 작업할 수 있는 메소드 제공<br>\n각 파라미터의 값을 조회, 수정, 삭제<br>\n문자열로 변환 등등</li>\n<li>문자열 앞의 ’?’는 자동으로 제거됨</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// url이 아닌 \"쿼리스트링\"을 인자로 전달해야 한다</span>\n\n<span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nparams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>_key_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 조회</span>\nparams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>_key_<span class=\"token punctuation\">,</span> _value_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 수정</span>\nparams<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>_key_<span class=\"token punctuation\">,</span> _value_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 추가</span>\nparams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">URLSearchParams</code>의 메소드를 사용하면 따로 객체로 변환하는 함수를 만들지 않아도 쉽게 파라미터의 값을 읽고 수정할 수 있다.</p>\n<p><strong>하나의 파라미터가 다수의 값을 갖는 경우 모든 값이 보존된다는 점이 좋은 것 같다.</strong> 객체는 같은 이름의 파라미터가 중복될 수 없기 때문에</p>","fields":{"slug":"/posts/code/1","tagSlugs":null},"frontmatter":{"date":"2020-06-05 19:31:00","description":"watta taxi 프로젝트를 하며 알게 된 쿼리스트링 파싱 함수를 정리해보자.","tags":null,"title":"쿼리스트링 파싱 함수","socialImage":null}}},"pageContext":{"slug":"/posts/code/1"}},"staticQueryHashes":["251939775","401334301","825871152"]}