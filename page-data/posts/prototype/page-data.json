{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/prototype","result":{"data":{"markdownRemark":{"id":"170b66a2-afd1-5572-a373-661573b7d8cc","html":"<blockquote>\n<p>정재남, 코어 자바스크립트, 위키북스</p>\n</blockquote>\n<p>자바스크립트는 프로토타입 기반 언어이다.</p>\n<p>클래스 기반 언어에서는 상속을 사용하지만, 자바스크립트에서는 대신 어떤 객체를 원형(prototype)으로 삼고 이를 참조함을써 상속과 비슷한 효과를 낸다.</p>\n<h2 id=\"프로토타입-개념\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B0%9C%EB%85%90\" aria-label=\"프로토타입 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 개념</h2>\n<p><img src=\"https://blog.kakaocdn.net/dn/d8bXKF/btqzKfhKKnA/oiWKbqLb3KqkKb07RBsi80/img.png\" alt=\"자바스크립트의 프로토타입\"></p>\n<ul>\n<li>프로토타입은 객체이다.</li>\n<li>\n<p><strong><code class=\"language-text\">prototype</code> 객체 내부에는 인스턴스가 사용할 메소드를 저장한다.</strong></p>\n<blockquote>\n<p>여기서 잠깐,<br>\n<strong>왜 메소드는 prototype에 저장해야 할까?</strong>\n생성자 함수 내부에서 메소드를 바로 작성(1)도 가능하지만 메소드는 prototype의 메소드로 작성하는 것(2)이 권장되는 방법이다.<br>\n(1)의 경우 인스턴스마다 같은 함수를 새롭게 생성하지만, (2)의 경우는 동일한 prototype의 메소드를 참조(같은 함수를 공유)하는 것이기 때문에 메모리 낭비를 방지할 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// (1)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hi! I', </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// (2)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hi! I', </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>자바스크립트에서 함수는 속성을 가질 수 있고, 모든 함수는 <code class=\"language-text\">prototype</code> 속성을 가진다.</li>\n<li>해당 함수를 생성자 함수로(new 키워드와 함께) 호출할 경우 그로부터 생성된 인스턴스에는 자동으로 <code class=\"language-text\">__proto__</code>라는 프로퍼티를 생성한다. 이 <code class=\"language-text\">__proto__</code> 프로퍼티는 생성자 함수의 prototype을 참조한다.</li>\n<li><strong>인스턴스의 <code class=\"language-text\">__proto__</code>프로퍼티는 생략이 가능하다.</strong><br>\n즉, 인스턴스의 <code class=\"language-text\">__proto__</code>프로퍼티로 생성자 함수 prototype의 프로퍼티에 접근할 수 있지만, 인스턴스의 프로퍼티로도 prototype 프로퍼티에 바로 접근이 가능하다.<br>\n-> <code class=\"language-text\">인스턴스.__proto__.프로퍼티 = 인스턴스.프로퍼티 = 생성자.prototype.프로퍼티</code></li>\n<li><em>“생성자 함수의 prototype에 어떤 메소드나 프로퍼티가 있다면 인스턴스에서도 마치 자신의 것처럼 해당 메소드나 프로퍼티에 접근할 수 있게 됩니다.”</em><br>\n인스턴스의 <code class=\"language-text\">__proto__</code>프로퍼티로 prototype 속성에 접근할 경우 <code class=\"language-text\">this</code>가 인스턴스를 가리키는 것이 아니라 <code class=\"language-text\">__proto__</code>를 가리키는 것에 주의해야 한다.</li>\n<li><strong>실제 <code class=\"language-text\">__proto__</code>프로퍼티로 접근을 할 경우 <code class=\"language-text\">인스턴스.__proto__</code>가 아닌 <code class=\"language-text\">Object.getPrototypeOf(인스턴스)</code>가 권장되는 방법이다.</strong></li>\n<li>프로토타입에는 constructor라는 프로퍼티가 있는데 이는 생성자 함수를 가리킨다. 이 프로퍼티는 인스턴스가 자신의 생성자 함수가 무엇인지를 알기 위함이다.</li>\n</ul>\n<h2 id=\"메소드-오버라이딩\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"메소드 오버라이딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메소드 오버라이딩</h2>\n<ul>\n<li>같은 이름의 메소드나 프로퍼티를 인스턴스의 프로퍼티로 할당할 수도 있고, 인스턴스의 <code class=\"language-text\">__proto__</code>의 프로퍼티로 할당할 수도 있다.</li>\n<li>이럴 경우 흔히 객체처럼 덮어쓰기되어 값이 교체되는 것이 아니라, (결국 다른 객체에 저장되는 것이니까..) 두 값 모두 보존이 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 동시에 할당이 가능</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ys'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// p1</span>\n<span class=\"token comment\">// 이런 형태</span>\nPerson <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'ys'</span><span class=\"token punctuation\">,</span>\n  getName<span class=\"token operator\">:</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;--</span>\n  __proto__<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    constructor<span class=\"token operator\">:</span> f <span class=\"token function\">Person</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;--</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"프로토타입-체이닝\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B4%EB%8B%9D\" aria-label=\"프로토타입 체이닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 체이닝</h2>\n<ul>\n<li>인스턴스의 <code class=\"language-text\">__proto__</code>속성은 조상의 <code class=\"language-text\">prototype</code>을 참조하고 그 조상은 다시 더 위의 조상의 인스턴스가 될 수 있다.<br>\n예를 들어, 배열 리터럴은 Array의 인스턴스이고 Array는 다시 Object의 인스턴스이다.</li>\n<li>객체의 속성에 접근하려고 할 때, 객체 자신의 속성을 검색한 뒤 <code class=\"language-text\">__proto__</code>가 참조하는 <code class=\"language-text\">prototype</code>의 속성을 검색하고 다시 …<br>\nprototype이 null을 가리키게 될 때까지 (window.Object.prototype) 계속 조상의 prototype 검색하여 올라간다.</li>\n<li>이렇게 어떤 속성에 접근할 때 <code class=\"language-text\">__proto__</code> 이 참조하는 프로토타입을 계속 찾아가는 과정을 <strong>프로토타입 체이닝</strong>이라고 하며, 이렇게 프로토타입이 연결되어 있는 것을 <strong>프로토타입 체인</strong>이라고 한다.</li>\n<li>이 프로토타입 체이닝을 통해 각 프로토타입 메소드(조상의 메소드)를 자신의 것처럼 호출할 수 있다. (<code class=\"language-text\">__proto__</code>가 생략이 가능하기 떄문에)</li>\n<li>이때 호출된 메소드는 인스턴스로부터 가장 가까운 메소드가 실행된다.</li>\n<li>이런 프로토타입 체이닝은 간혹 성능에 나쁜 영향을 줄 수 있다.<br>\n가령, 객체에 존재하지 않는 속성에 접근하려 할 때에 프로토타입 체인상에 있는 모든 객체의 속성을 탐색해야 하기 때문에 성능에 매우 좋지 않다.</li>\n<li>이럴 때는 자신만의 속성만 검사하는 <code class=\"language-text\">hasOwnProperty</code> 메소드를 사용하도록 한다.</li>\n</ul>\n<h2 id=\"객체-전용-메소드의-예외사항\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%A0%84%EC%9A%A9-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EC%98%88%EC%99%B8%EC%82%AC%ED%95%AD\" aria-label=\"객체 전용 메소드의 예외사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 전용 메소드의 예외사항</h2>\n<ul>\n<li>프로토타입은 결국 객체이기 때문에 (프로토타입 자체가 결국 객체의 인스턴스이기 때문에), <code class=\"language-text\">__proto__</code> 이 참조하는 프로토타입을 계속 찾아가면 결국 그 끝은 Object.prototype이다.</li>\n<li>그렇기 때문에 Object.prototype에 저장된 메소드는 모든 데이터 타입에서 (타입에 상관없이) 사용할 수 있기 때문에 주의가 필요하다.</li>\n<li>이런 이유로 객체만을 대상으로 하는 객체 전용 메소드들은 Object.prototype이 아닌, Object의 스태틱 메소드로 부여되었다.<br>\n-> Object.entries(<em>object instance</em>)로 써야하는 이유</li>\n</ul>","fields":{"slug":"/posts/prototype","tagSlugs":null},"frontmatter":{"date":"2020-07-31 12:53:00","description":"코어자바스크립트 6장. prototype","tags":null,"title":"JS | prototype","socialImage":null}}},"pageContext":{"slug":"/posts/prototype"}},"staticQueryHashes":["251939775","401334301","825871152"]}