{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/regexp","result":{"data":{"markdownRemark":{"id":"c0b3d05f-eae9-517b-831e-aab263fed725","html":"<p>정규표현식을 공부하면서 여러 예제를 만들어보던 도중 오류가 발생했다. 이유는 다음 메소드에서 전역 플래그를 사용할 경우 lastIndex 속성을 업데이트하기 때문이었다. 이번에 접한 오류에 대해 정리해보고자 한다.</p>\n<h3 id=\"question\" style=\"position:relative;\"><a href=\"#question\" aria-label=\"question permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Question</h3>\n<p>‘who’를 포함하거나 포함하지 않는 여러 문자열을 만들고, 정규식을 사용해서 문자열 중에 <strong>‘who’와 일치하는 부분만 배열로 반환</strong>하는 코드를 작성해보았다. 그런데 정규식 <code class=\"language-text\">/who/</code> 를 사용한 코드와 <code class=\"language-text\">/who/g</code> 를 사용한 코드의 결과가 다르게 나타났다.</p>\n<p>문자열 <code class=\"language-text\">'who is it'</code> 이 정규식 <code class=\"language-text\">/who/g</code> 에서는 검색이 되지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> tgStrs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"who is who\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"who is it\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"it is who\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"what is it\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"what who what\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regExp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">who</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> regExp_g <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">who</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> passedStrs <span class=\"token operator\">=</span> tgStrs<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> regExp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> passedStrs_g <span class=\"token operator\">=</span> tgStrs<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> regExp_g<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 정규표현식 /who/를 사용한 결과</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passedStrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n(4) [\"who is who\", \"who is it\", \"it is who\", \"what who what\"]\n0: \"who is who\"\n1: \"who is it\"\n2: \"it is who\"\n3: \"what who what\"\n*/</span>\n\n<span class=\"token comment\">// 정규표현식 /who/g를 사용한 결과</span>\n<span class=\"token comment\">// 'who is it'이 매칭되지 않음</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>passedStrs_g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n(3) [\"who is who\", \"it is who\", \"what who what\"]\n0: \"who is who\"\n1: \"it is who\"\n2: \"what who what\"\n*/</span></code></pre></div>\n<h3 id=\"answer\" style=\"position:relative;\"><a href=\"#answer\" aria-label=\"answer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Answer</h3>\n<p>이유는 <code class=\"language-text\">test()</code>의 <code class=\"language-text\">lastIndex</code> 속성 때문이었다. 이러한 점은 <code class=\"language-text\">exec()</code> 메소드에서도 마찬가지이다.</p>\n<p><code class=\"language-text\">/who/g</code> 처럼 <code class=\"language-text\">.test()</code>나 <code class=\"language-text\">.exec()</code> 메소드에서 전역 플래그를 사용하는 경우 메소드는 문자열을 검색한 후 그것의 위치를 <code class=\"language-text\">lastIndex</code> 속성에 저장한다. 다음 타깃 문자열을 검색할 때는 (이전과 다른 문자열이어도) 저장된 <code class=\"language-text\">lastIndex</code>의 위치에서부터 검색을 시작한다.\n메소드가 <code class=\"language-text\">true</code>를 반환하면 <code class=\"language-text\">lastIndex</code>는 검색된 위치값만큼 계속 증가하고 <code class=\"language-text\">false</code>나 <code class=\"language-text\">null</code>를 반환하면 <code class=\"language-text\">0</code>이 된다.</p>\n<hr>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN | 전역 플래그와 test()</a></p>","fields":{"slug":"/posts/regexp","tagSlugs":null},"frontmatter":{"date":"2020-04-11 19:31:00","description":"test()와 exec()를 전역플래그와 함께 사용했을 때 나타나는 문제","tags":null,"title":"정규표현식: 전역플랙그와 test(), exec()의 lastIndex속성","socialImage":null}}},"pageContext":{"slug":"/posts/regexp"}},"staticQueryHashes":["251939775","401334301","825871152"]}