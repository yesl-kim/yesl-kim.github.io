{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/promise","result":{"data":{"markdownRemark":{"id":"ecb059e4-341c-5316-b753-02d8c41a7dbc","html":"<blockquote>\n<p>이재승, &#x3C;실전 리액트 프로그래밍 개정판>, 인사이트</p>\n</blockquote>\n<p>본 글은 ‘실전 리액트 프로그래밍’ 책을 보고 요약, 정리한 글로 필자가 이해함에 따라 알고 있는 내용이나 이해하지 못한 내용은 생략되기도 함을 알린다. (순전히 개인 학습 후 정리글)</p>\n<p>그래서 프로미스란.</p>\n<ul>\n<li>ES6부터 포함된 문법으로</li>\n<li>비동기 상태를 값으로 가지는 <strong>객체</strong></li>\n<li><strong>비동기 프로그래밍을 동기 프로그래밍 방식으로 코드를 작성할 수 있도록 함</strong></li>\n</ul>\n<hr>\n<h2 id=\"등장배경\" style=\"position:relative;\"><a href=\"#%EB%93%B1%EC%9E%A5%EB%B0%B0%EA%B2%BD\" aria-label=\"등장배경 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>등장배경</h2>\n<h3 id=\"콜백-패턴의-문제점\" style=\"position:relative;\"><a href=\"#%EC%BD%9C%EB%B0%B1-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"콜백 패턴의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>콜백 패턴의 문제점</h3>\n<p><strong>코드의 흐름이 순차적이지 않다</strong></p>\n<ul>\n<li>기존에는(프로미스가 등장하기 전) 비동기 처리를 위해 주로 콜백 함수를 사용</li>\n<li>콜백 패턴은 코드의 가독성을 해칠 뿐 아니라 (너무 복잡), 함수의 실행시점을 바로 알기 어렵다는 단점</li>\n<li>이를 보안하기 위해 등장한 것이 프로미스</li>\n</ul>\n<p><strong>=> 프로미스를 사용하면, 코드가 순차적으로 실행되도록 작성할 수 있다.</strong></p>\n<br/>\n<h2 id=\"프로미스-기본\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%EA%B8%B0%EB%B3%B8\" aria-label=\"프로미스 기본 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로미스 기본</h2>\n<h3 id=\"세가지-상태\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B0%80%EC%A7%80-%EC%83%81%ED%83%9C\" aria-label=\"세가지 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세가지 상태</h3>\n<p>프로미스는 비동기 상태에 따라 세가지의 상태값을 가진다.</p>\n<ul>\n<li><strong>pending</strong> 대기</li>\n<li><strong>fulfilled</strong> 성공<br>\n정상적으로 완료 후 결과값을 가지고 있음</li>\n<li><strong>rejected</strong> 실패</li>\n</ul>\n<h3 id=\"프로미스를-생성하는-방법\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"프로미스를 생성하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로미스를 생성하는 방법</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// new 키워드 사용</span>\n<span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 프로미스 메소드 사용</span>\n<span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>프로미스는 resolve함수와, reject 함수를 인자로 받는다.</li>\n<li>생성과 동시에 실행된다.</li>\n<li>프로미스 생성자 함수 내에서 비동기 처리가 성공하면 resolve 함수를 호출하고 fulfilled 상태의 프로미스 객체를 반환한다.</li>\n<li>프로미스 생성자 함수 내에서 비동기 처리가 실패하면 reject 함수를 호출하고 rejected 상태의 프로미스 객체를 반환한다.</li>\n<li>메소드를 사용하면 각 상태의 프로미스를 생성한다.<br>\nresolve -> fulfilled<br>\nreject -> rejected</li>\n<li>p2: resolve 메소드에 인자로<br>\n프로미스가 아닌 값을 전달 -> 인자를 값으로 가진 프로미스 반환<br>\n프로미스 전달 -> 프로미스를 그대로 반환</li>\n</ul>\n<h3 id=\"then과-catch-프로미스-체이닝과-예외-처리\" style=\"position:relative;\"><a href=\"#then%EA%B3%BC-catch-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EA%B3%BC-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC\" aria-label=\"then과 catch 프로미스 체이닝과 예외 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>then과 catch: 프로미스 체이닝과 예외 처리</h3>\n<ul>\n<li><code class=\"language-text\">then(onResolve, onReject)</code><br>\nthen은 fulfilled 상태의 프로미스를 전달받았을 때 실행되는 onResolve 함수와 rejected 상태의 프로미스를 전달받았을 때 실행되는 onReject 함수를 인자로 받는다.</li>\n<li>then은 내부에서 반환하는 값을 가지는 <strong>프로미스</strong>를 반환한다.</li>\n<li>그렇기 때문에 then은 또 다른 then으로 연결될 수 있다. (프로미스 체이닝)</li>\n<li>then은 반드시 반환값이 있어야 한다.</li>\n<li>\n<p><strong>예외 처리는 catch로</strong><br>\nthen에도 두번째 인자로 예외 처리 함수를 전달할 수 있지만 그렇게 되면</p>\n<ol>\n<li>가독성에 좋지 않고</li>\n<li>then 안에서 예외가 발생했을 때 처리할 수 없다.<br>\n그렇기 때문에 예외 처리는 catch로 한다.</li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in then\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (건너뜀)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in catch\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'in catch' Error: 'hi'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br />\n<h2 id=\"프로미스-활용\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%ED%99%9C%EC%9A%A9\" aria-label=\"프로미스 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로미스 활용</h2>\n<h3 id=\"promisefinally\" style=\"position:relative;\"><a href=\"#promisefinally\" aria-label=\"promisefinally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.finally</h3>\n<ul>\n<li>프로미스 가장 마지막에 사용된다.</li>\n<li>이전의 사용된 프로미스의 값을 건드리지 않고 그대로 반환한다.</li>\n<li>ex) 데이터 요청의 성공, 실패 여부와 상관없이 서버에 로그를 보낼 때</li>\n</ul>\n<h3 id=\"promiseall\" style=\"position:relative;\"><a href=\"#promiseall\" aria-label=\"promiseall permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.all</h3>\n<ul>\n<li>여러개의 프로미스를 <strong>병렬</strong>로 처리할 때 사용</li>\n<li>병렬적으로 처리하고자 하는 프로미스를 배열 형태로 전달</li>\n<li>전달된 프로미스가 <strong>모두</strong> 성공했을 때 fulfilled 상태의 프로미스 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">asyncFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"promiserace\" style=\"position:relative;\"><a href=\"#promiserace\" aria-label=\"promiserace permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise.race</h3>\n<ul>\n<li>전달받은 여러개의 프로미스 중 가장 빨리 완료된 프로미스를 반환</li>\n<li>하나라도 처리됨 상태(fulfilled || rejected)가 되면 처리됨 상태의 프로미스 반환</li>\n</ul>\n<br />\n<h2 id=\"async-await\" style=\"position:relative;\"><a href=\"#async-await\" aria-label=\"async await permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async, await</h2>\n<ul>\n<li>then을 사용한 프로미스 체이닝 형식보다 가독성이 좋아진다.</li>\n<li><strong>프로미스를 완전히 대체하는 것은 아니다.</strong><br>\n프로미스는 비동기 상태도 값으로 다룰 수 있기 때문에 프로미스가 더 큰 개념이다.</li>\n<li>프로미스는 객체로 존재, async, await는 함수에 적용되는 개념이다.</li>\n<li>async 를 사용한 함수는, 그 내부의 반환값을 가지는 프로미스를 반환한다.</li>\n<li><strong>예외 처리는 try catch</strong><br>\ntry 안의 코드를 실행 후 예외가 발생하면 catch 안의 코드를 실행한다.</li>\n<li>비동기 함수를 병렬로 실행<br>\nawait를 사용하지 않고 프로미스를 먼저 생성 후, 그 다음에 await를 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">asyncFunc1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">aynscFunc2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> p2<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>async, await는 thenable을 지원한다.<br>\nthenable: 프로미스는 아니지만 then 메소드를 가진 객체<br>\nasync await 함수는 thenabel을 프로미스처럼 처리한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> thenable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> thenable<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ayncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> thenable<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 123</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ayncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/promise","tagSlugs":null},"frontmatter":{"date":"2020-07-27 14:10:00","description":"실전 리액트 프로그래밍 책을 보고 요약, 정리한 글로 필자가 이해함에 따라 알고 있는 내용이나 이해하지 못한 내용은 생략되기도 했다","tags":null,"title":"JS | Promise (+ async await)","socialImage":null}}},"pageContext":{"slug":"/posts/promise"}},"staticQueryHashes":["251939775","401334301","825871152"]}