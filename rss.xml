<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Yeseul]]></title><description><![CDATA[Front end developer]]></description><link>https://yesl-kim.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 28 Jul 2021 11:47:45 GMT</lastBuildDate><item><title><![CDATA[this]]></title><description><![CDATA[코어자바스크립트 3장. this]]></description><link>https://yesl-kim.github.io//posts/this</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/this</guid><pubDate>Tue, 28 Jul 2020 10:57:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://poiemaweb.com/js-this&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;poiemaweb | 5.17 this&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://poiemaweb.com/es6-arrow-function&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;poiemaweb | 6.3 Arrow function&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;MDN | 화살표 함수&lt;/a&gt;&lt;br&gt;
정재남, 코어자바스크립트, 위키북스&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;일반-함수의-this&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EC%9D%98-this&quot; aria-label=&quot;일반 함수의 this permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;일반 함수의 this&lt;/h2&gt;
&lt;p&gt;자바스크립트는 &lt;strong&gt;함수 호출 방식&lt;/strong&gt;에 따라 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;에 바인딩되는 객체가 달라진다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;함수 호출 방식&lt;/li&gt;
&lt;li&gt;메소드 호출 방식&lt;/li&gt;
&lt;li&gt;생성자 함수 호출 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h3 id=&quot;함수-호출-방식--전역객체&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EC%8B%9D--%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;함수 호출 방식  전역객체 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수 호출 방식 : 전역객체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;는 전역객체에 바인딩된다.&lt;/li&gt;
&lt;li&gt;브라우저 환경에서 전역객체는 &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt;, Node.js 환경에서는 &lt;code class=&quot;language-text&quot;&gt;global&lt;/code&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h3 id=&quot;메소드-호출-방식--메소드를-호출한-obj&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%86%8C%EB%93%9C-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EC%8B%9D--%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%9C-obj&quot; aria-label=&quot;메소드 호출 방식  메소드를 호출한 obj permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메소드 호출 방식 : 메소드를 호출한 obj&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;함수를 객체의 메소드로 호출할 경우 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;는 메소드를 호츨한 객체에 바인딩된다.&lt;/li&gt;
&lt;li&gt;메소드 내부에서 함수를 호출하더라도 그 방식이 메소드로서가 아닌 함수로 호출했다면 this는 전역객체를 가리킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;outer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; obj1&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;innerFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;innerFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;innerFunc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; window&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      innerMethod&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; innerFunc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    obj2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;innerMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;innerMethod&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; obj2&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

obj1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;h3 id=&quot;생성자-함수-호출--instance&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C--instance&quot; aria-label=&quot;생성자 함수 호출  instance permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;생성자 함수 호출 : instance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;new 키워드와 함께 호출된 함수는 생성자 함수로서 실행된다.&lt;/li&gt;
&lt;li&gt;생성자 함수로 호출된 함수 내부의 this는 생성자 함수로 새로 만들어진 객체 (instance)를 가리킨다.&lt;/li&gt;
&lt;li&gt;참고로 생성자 함수는 일단 빈 객체를 만들고 함수 안에서 &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;를 통해 빈 객체에 새로운 프로퍼티를 추가하는 방식으로 동작한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h3 id=&quot;콜백-함수-호출-방식--콜백함수를-받는-메소드가-지정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C-%EB%B0%A9%EC%8B%9D--%EC%BD%9C%EB%B0%B1%ED%95%A8%EC%88%98%EB%A5%BC-%EB%B0%9B%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C%EA%B0%80-%EC%A7%80%EC%A0%95&quot; aria-label=&quot;콜백 함수 호출 방식  콜백함수를 받는 메소드가 지정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;콜백 함수 호출 방식 : 콜백함수를 받는 메소드가 지정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;콜백함수를 받는 메소드(setTimeout, map, forEach 등과 같이 콜백함수를 전달해준 메소드)에게 제어권이 있다.&lt;/li&gt;
&lt;li&gt;즉, 메소드에서 지정하는 요소가 this가 된다.&lt;br&gt;
대표적인 예가 &lt;code class=&quot;language-text&quot;&gt;EventListener&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;EventListener&lt;/code&gt; 메소드는 이벤트가 일어난 객체를 this에 바인딩한다.&lt;/li&gt;
&lt;li&gt;메소드가 지정하지 않을 경우 기본적으로 전역객체를 바인딩하게 된다.&lt;br&gt;
대표적인 예가 &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h3 id=&quot;번외-this를-우회하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B2%88%EC%99%B8-this%EB%A5%BC-%EC%9A%B0%ED%9A%8C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;번외 this를 우회하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;번외) this를 우회하는 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일반 함수로 호출하면서 주변 환경의 this를 그대로 사용하고 싶다면,&lt;br&gt;
주변 환경의 this를 따로 임의의 변수에 담아 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;임의의 변수명으로는 주로 _this, that, self를 쓴다&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; self &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;innerFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;innerFunc2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;innerFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; window&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;innerFunc2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; obj1&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

obj1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;화살표-함수의-this&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EC%9D%98-this&quot; aria-label=&quot;화살표 함수의 this permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;화살표 함수의 this&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;화살표 함수는 실행 컨텍스트 생성 시 this가 바인딩되는 과정이 제외되었다.&lt;/li&gt;
&lt;li&gt;함수가 선언될 때 this가 정적으로 결정된다.&lt;/li&gt;
&lt;li&gt;화살표 함수로 정의된 함수를 호출하면,
그 방식이 내부 함수이든, 콜백 함수이든간에 &lt;strong&gt;항상 선언된 시점의 바로 상위 스코프의 this&lt;/strong&gt;를 가리킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;globalArrowFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;outer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; window&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 선언 시점 obj1와 같은 레벨의 컨텍스트를 갖는다.&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 그 상위 레벨인 전역 스코프의 전역 객체가 this에 바인딩된다.&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;innerArrowFunc&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;innerArrowFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;innerArrowFunc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; obj1&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;globalArrowFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;globalArrowFunc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; window&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      innerArrowMethod&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; innerArrowFunc&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    obj2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;innerArrowMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;innerArrowMethod&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this -&gt; obj1&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 함수로 호출하든지 메소드로 호출하든지, 호출방식은 관여하지 않는다.&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

obj1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;hr&gt;
&lt;h2 id=&quot;this를-명시적으로-바인딩하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#this%EB%A5%BC-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%B0%94%EC%9D%B8%EB%94%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;this를 명시적으로 바인딩하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;this를 명시적으로 바인딩하는 방법&lt;/h2&gt;
&lt;h3 id=&quot;call&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#call&quot; aria-label=&quot;call permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;call&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Fuction.prototype.call(thisArg[, arg1[, arg2 [, …]])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;h3 id=&quot;apply&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#apply&quot; aria-label=&quot;apply permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;apply&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Function.prototype.apply(thisArg[, argArr])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;메소드의 호출 주체인 함수를 즉시 실행한다.&lt;/li&gt;
&lt;li&gt;이때 함수에 첫번째 인자를 this로 전달하고, 그 외의 인자들은 모두 함수의 인자로 전달한다.&lt;/li&gt;
&lt;li&gt;call 과 apply의 기능은 완전히 동일하다.&lt;/li&gt;
&lt;li&gt;다른 점은&lt;br&gt;
call은 함수에 전달되는 인자를 그대로, apply는 인자를 &lt;strong&gt;배열형태로&lt;/strong&gt; 전달받는다는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;h3 id=&quot;call과-bind의-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#call%EA%B3%BC-bind%EC%9D%98-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;call과 bind의 활용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;call과 bind의 활용&lt;/h3&gt;
&lt;h4 id=&quot;유사배열객체에-배열-메소드-사용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%EC%82%AC%EB%B0%B0%EC%97%B4%EA%B0%9D%EC%B2%B4%EC%97%90-%EB%B0%B0%EC%97%B4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;유사배열객체에 배열 메소드 사용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유사배열객체에 배열 메소드 사용&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;유사배열객체&lt;/strong&gt;&lt;br&gt;
0 또는 양의 정수의 프로퍼티가 하나 이상 있고&lt;br&gt;
length 프로퍼티가 0 또는 양의 정수의 값을 가지고 있는 객체&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br/&gt;
&lt;h4 id=&quot;생성자-함수-내부에서-또다른-생성자-함수를-호출할-때&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98-%EB%82%B4%EB%B6%80%EC%97%90%EC%84%9C-%EB%98%90%EB%8B%A4%EB%A5%B8-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%98%B8%EC%B6%9C%ED%95%A0-%EB%95%8C&quot; aria-label=&quot;생성자 함수 내부에서 또다른 생성자 함수를 호출할 때 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;생성자 함수 내부에서 또다른 생성자 함수를 호출할 때&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;생성자 함수 내부에서 다른 생성자 함수를 호출하여 중복되는 코드를 줄일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gender&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;gender &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; gender&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; school&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;school &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; school&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; company&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; gender&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;company &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; company&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;h4 id=&quot;여러-인수의-배열을-묶어-한번에-전달하고-싶을-때&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EB%9F%AC-%EC%9D%B8%EC%88%98%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%9D%84-%EB%AC%B6%EC%96%B4-%ED%95%9C%EB%B2%88%EC%97%90-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%84-%EB%95%8C&quot; aria-label=&quot;여러 인수의 배열을 묶어 한번에 전달하고 싶을 때 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여러 인수의 배열을 묶어 한번에 전달하고 싶을 때&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nums &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;h3 id=&quot;bind&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#bind&quot; aria-label=&quot;bind permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;bind&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Function.prototype.bind(thisArg[, arg1[, arg2[, …]]])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;call과 apply와 다르게 바로 실행하지 않는다.&lt;br&gt;
thisArg를 this로 사용하고 인자들을 사용하는 &lt;strong&gt;함수를 반환한다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;name 프로퍼티에 &lt;code class=&quot;language-text&quot;&gt;bound _원본 함수명_&lt;/code&gt; 로 저장되어 call과 apply보다 코드를 추적하기 더 수월하다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[실행 컨텍스트: 호이스팅과 스코프]]></title><description><![CDATA[코어 자바스크립트 2장. 실행 컨텍스트]]></description><link>https://yesl-kim.github.io//posts/context</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/context</guid><pubDate>Mon, 27 Jul 2020 05:25:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;정재남, &amp;#x3C;코어 자바스크립트&gt;, 위키북스&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 글은 ‘코어 자바스크립트’ 책을 참고하여 요약한 것으로 크게 두 가지 개념을 담고 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;호이스팅&lt;/li&gt;
&lt;li&gt;스코프&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;실행-컨텍스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;실행 컨텍스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행 컨텍스트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;실행할 코드에 필요한 환경 정보들을 모아놓은 객체&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;전역 컨텍스트&lt;br&gt;
전역 공간에 대한 정보.&lt;br&gt;
자동으로 생성&lt;/li&gt;
&lt;li&gt;eval 및 함수에 의한 컨텍스트&lt;br&gt;
함수가 실행될 때 필요한 정보들을 수집&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;이외에도 있는 것 같지만 책을 통해 알 수 있는 것은 여기까지였다.&lt;/del&gt;&lt;/p&gt;
&lt;h3 id=&quot;실행-컨텍스트의-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;실행 컨텍스트의 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행 컨텍스트의 구성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;VariableEnvironment&lt;/strong&gt;&lt;br&gt;
변경사항은 반영되지 않음&lt;br&gt;
선언 시점의 LexicalEnvironment의 스냅샷이라고 생각하면 됨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;environmentRecord&lt;br&gt;
현재 컨텍스트 내의 식별자들에 대한 정보&lt;/li&gt;
&lt;li&gt;outerEnvironmentReference&lt;br&gt;
외부 환경 정보&lt;br&gt;
바로 직전 컨텍스트 (= 상위 레벨 스코프)의 LexicalEnvironment를 참조&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LexicalEnvironment&lt;/strong&gt;&lt;br&gt;
변경사항 반영&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;environmentRecord&lt;/li&gt;
&lt;li&gt;outerEnvironmentReference&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ThisBinding&lt;/strong&gt;&lt;br&gt;
this 식별자가 바라봐야 할 대상 객체&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;p&gt;처음에 현재 컨텍스트 내의 식별자들에 대한 정보 + 외부 환경 정보를 모아 &lt;code class=&quot;language-text&quot;&gt;VariableEnvironment&lt;/code&gt;를 생성한 후, 이를 그대로 복사하여 &lt;code class=&quot;language-text&quot;&gt;LexicalEnvironment&lt;/code&gt;를 만들고 이후에는 주로 &lt;code class=&quot;language-text&quot;&gt;LexicalEnvironment&lt;/code&gt;를 활용한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;VariableEnvironment&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;LexicalEnvironment&lt;/code&gt;는 다시 현재 컨텍스트 내의 식별자들에 대한 정보가 담긴 &lt;code class=&quot;language-text&quot;&gt;environmentRecord&lt;/code&gt;와 외부 환경 정보가 담긴 &lt;code class=&quot;language-text&quot;&gt;outerEnvironmentReference&lt;/code&gt;로 구성된다.&lt;/p&gt;
&lt;h2 id=&quot;environmentrecord와-호이스팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#environmentrecord%EC%99%80-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85&quot; aria-label=&quot;environmentrecord와 호이스팅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;environmentRecord와 호이스팅&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;environmentRecord&lt;/code&gt; 에는 현재 컨텍스트 내부의 식별자들에 대한 정보, 즉 매개변수명, 함수 내부에서 선언된 함수, 변수명 등이 저장된다.&lt;/p&gt;
&lt;p&gt;이런 정보는 함수가 호출이 되면 &lt;strong&gt;함수가 실행되기 전에&lt;/strong&gt; 작성된 &lt;strong&gt;순서대로&lt;/strong&gt; 한 데 모아 &lt;code class=&quot;language-text&quot;&gt;environmentRecord&lt;/code&gt;에 저장된다. &lt;strong&gt;호이스팅&lt;/strong&gt;(= “끌어올리는 것”)이란 실제 물리적으로 식별자 정보들을 끌어올리는 것이 아니라 &lt;strong&gt;함수 실행 전 식별자 정보들만 먼저 저장하는 과정을 표현한 추상의 개념이라고 보면 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이때 &lt;strong&gt;변수는 선언부만 호이스팅하는 반면에 함수 선언문은 전체를 호이스팅&lt;/strong&gt;하기 때문에 함수 선언문으로 정의한 함수는 선언 전에 호출해도 오류없이 실행이 된다. &lt;strong&gt;이런 점은 혼란을 일으킬 수 있기 때문에 함수 표현식으로 정의하는 것이 좋다.&lt;/strong&gt; (함수 표현식으로 정의한 함수는 변수처럼 선언부만 호이스팅 되기 때문)&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;outerenvironmentreference와-스코프&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#outerenvironmentreference%EC%99%80-%EC%8A%A4%EC%BD%94%ED%94%84&quot; aria-label=&quot;outerenvironmentreference와 스코프 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;outerEnvironmentReference와 스코프&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Block&lt;/strong&gt;&lt;br&gt;
중괄호 &lt;code class=&quot;language-text&quot;&gt;{}&lt;/code&gt;로 감싸진 범위 (&lt;code class=&quot;language-text&quot;&gt;for&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;if&lt;/code&gt; 등)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scope&lt;/strong&gt;&lt;br&gt;
식별자에 대한 유효범위&lt;br&gt;
참조 대상 식별자(변수명, 함수명처럼 어떤 대상을 다른 대상과 구분하여 식별할 수 있는 이름)에 접근할 수 있는 범위&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;스코프란 식별자에 대한 유효범위를 말한다. 여기서 식별자란 값이나 표현식에 대한 주소값 (변수명이나 함수명)을 말한다.&lt;/p&gt;
&lt;p&gt;앞서 언급했던 실행 컨텍스트의 &lt;code class=&quot;language-text&quot;&gt;outerEnvironmentReference&lt;/code&gt;는 현재 호출된 함수가 &lt;strong&gt;선언될 당시의&lt;/strong&gt; LexicalEnvironment를 &lt;strong&gt;참조&lt;/strong&gt;한다. 간단히 말하면 부모의 (조상x, 바로 위 함수) LexicalEnvironment를 가리킨다. 그래서 함수를 실행할 때 필요한 식별자에 대한 정보가 함수 내부, 즉 자신의 &lt;code class=&quot;language-text&quot;&gt;LexicalEnvironment&lt;/code&gt; 안에 저장되어있지 않으면 &lt;code class=&quot;language-text&quot;&gt;outerEnvironmentReference&lt;/code&gt;가 가리키고 있는 (부모 함수의) &lt;code class=&quot;language-text&quot;&gt;LexicalEnvironment&lt;/code&gt;에서 그 정보를 찾는다.&lt;/p&gt;
&lt;p&gt;역시 그 위의 함수는 다시 더 위의 &lt;code class=&quot;language-text&quot;&gt;LexicalEnvironment&lt;/code&gt;를 가리키고 있어서 &lt;code class=&quot;language-text&quot;&gt;outerEnvironmentReference&lt;/code&gt;는 연결 리스트의 형태를 띤다. 이런 형태로 내부에 저장되어 있지 않은 식별자 정보를 찾아 찾아가는 것, 이렇게 연결되어 있는 것을 스코프 체인이라고 한다. 이런 구조 때문에 스코프가 중첩되어 있을 경우 가장 가까운 스코프의 정보를 우선 참조한다.&lt;/p&gt;
&lt;p&gt;자바스크립트는 함수 레벨 스코프를 만들지만 ES6의 let, const 키워드를 통해 블록 레벨 스코프를 만들 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;정리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EB%A6%AC&quot; aria-label=&quot;정리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;스코프란 식별자에 대한 유효범위를 말한다.&lt;/li&gt;
&lt;li&gt;식별자는 자신이 &lt;strong&gt;어디서 선언되었는지&lt;/strong&gt;에 의해 유효한 범위를 갖는다.&lt;/li&gt;
&lt;li&gt;하위 스코프는 상위 스코프에 접근할 수 있지만 상위 스코프는 하위 스코프에 접근이 불가하다.&lt;/li&gt;
&lt;li&gt;중첩 스코프는 가장 인접한 지역을 우선 참조한다.&lt;/li&gt;
&lt;li&gt;자바스크립트는 블록 레벨이 아닌 &lt;strong&gt;함수 레벨 스코프&lt;/strong&gt;를 따른다. 하지만 ES6 문법의 &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; 키워드를 쓰면 &lt;strong&gt;블록 레벨 스코프&lt;/strong&gt;를 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;scope-사용에-주의할-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#scope-%EC%82%AC%EC%9A%A9%EC%97%90-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90&quot; aria-label=&quot;scope 사용에 주의할 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scope 사용에 주의할 점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;최소한의 전역 변수 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최대한 &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; 키워드를 사용하여 전역 변수를 줄이는 것이 좋다.&lt;/li&gt;
&lt;li&gt;전역 변수의 사용을 줄이는 방법으로 전역 변수의 객체를 만들어 사용하는 것이다.&lt;/li&gt;
&lt;li&gt;즉시 실행함수를 사용하면 함수 실행 후 전역 변수는 즉시 삭제된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다른 블록, 스코프에 있는 변수끼리도 변수명이 중복되지 않도록 주의한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;scope의 오염 예제.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;logSkyColor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dusk &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; myColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dusk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; myColor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pink&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myColor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// pink&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myColor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// blue&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myColor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 에러!!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Promise? (+ async await)]]></title><description><![CDATA[실전 리액트 프로그래밍 책을 보고 요약, 정리한 글로 필자가 이해함에 따라 알고 있는 내용이나 이해하지 못한 내용은 생략되기도 했다]]></description><link>https://yesl-kim.github.io//posts/promise</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/promise</guid><pubDate>Mon, 27 Jul 2020 05:10:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;이재승, &amp;#x3C;실전 리액트 프로그래밍 개정판&gt;, 인사이트&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;본 글은 ‘실전 리액트 프로그래밍’ 책을 보고 요약, 정리한 글로 필자가 이해함에 따라 알고 있는 내용이나 이해하지 못한 내용은 생략되기도 함을 알린다. (순전히 개인 학습 후 정리글)&lt;/p&gt;
&lt;p&gt;그래서 프로미스란.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6부터 포함된 문법으로&lt;/li&gt;
&lt;li&gt;비동기 상태를 값으로 가지는 &lt;strong&gt;객체&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;비동기 프로그래밍을 동기 프로그래밍 방식으로 코드를 작성할 수 있도록 함&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;등장배경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%93%B1%EC%9E%A5%EB%B0%B0%EA%B2%BD&quot; aria-label=&quot;등장배경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;등장배경&lt;/h2&gt;
&lt;h3 id=&quot;콜백-패턴의-문제점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%9C%EB%B0%B1-%ED%8C%A8%ED%84%B4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; aria-label=&quot;콜백 패턴의 문제점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;콜백 패턴의 문제점&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;코드의 흐름이 순차적이지 않다&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존에는(프로미스가 등장하기 전) 비동기 처리를 위해 주로 콜백 함수를 사용&lt;/li&gt;
&lt;li&gt;콜백 패턴은 코드의 가독성을 해칠 뿐 아니라 (너무 복잡), 함수의 실행시점을 바로 알기 어렵다는 단점&lt;/li&gt;
&lt;li&gt;이를 보안하기 위해 등장한 것이 프로미스&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;=&gt; 프로미스를 사용하면, 코드가 순차적으로 실행되도록 작성할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&quot;프로미스-기본&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%EA%B8%B0%EB%B3%B8&quot; aria-label=&quot;프로미스 기본 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로미스 기본&lt;/h2&gt;
&lt;h3 id=&quot;세가지-상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%B8%EA%B0%80%EC%A7%80-%EC%83%81%ED%83%9C&quot; aria-label=&quot;세가지 상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세가지 상태&lt;/h3&gt;
&lt;p&gt;프로미스는 비동기 상태에 따라 세가지의 상태값을 가진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pending&lt;/strong&gt; 대기&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fulfilled&lt;/strong&gt; 성공&lt;br&gt;
정상적으로 완료 후 결과값을 가지고 있음&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rejected&lt;/strong&gt; 실패&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프로미스를-생성하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;프로미스를 생성하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로미스를 생성하는 방법&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// new 키워드 사용&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 프로미스 메소드 사용&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;프로미스는 resolve함수와, reject 함수를 인자로 받는다.&lt;/li&gt;
&lt;li&gt;생성과 동시에 실행된다.&lt;/li&gt;
&lt;li&gt;프로미스 생성자 함수 내에서 비동기 처리가 성공하면 resolve 함수를 호출하고 fulfilled 상태의 프로미스 객체를 반환한다.&lt;/li&gt;
&lt;li&gt;프로미스 생성자 함수 내에서 비동기 처리가 실패하면 reject 함수를 호출하고 rejected 상태의 프로미스 객체를 반환한다.&lt;/li&gt;
&lt;li&gt;메소드를 사용하면 각 상태의 프로미스를 생성한다.&lt;br&gt;
resolve -&gt; fulfilled&lt;br&gt;
reject -&gt; rejected&lt;/li&gt;
&lt;li&gt;p2: resolve 메소드에 인자로&lt;br&gt;
프로미스가 아닌 값을 전달 -&gt; 인자를 값으로 가진 프로미스 반환&lt;br&gt;
프로미스 전달 -&gt; 프로미스를 그대로 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;then과-catch-프로미스-체이닝과-예외-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#then%EA%B3%BC-catch-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%EC%B2%B4%EC%9D%B4%EB%8B%9D%EA%B3%BC-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;then과 catch 프로미스 체이닝과 예외 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;then과 catch: 프로미스 체이닝과 예외 처리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;then(onResolve, onReject)&lt;/code&gt;&lt;br&gt;
then은 fulfilled 상태의 프로미스를 전달받았을 때 실행되는 onResolve 함수와 rejected 상태의 프로미스를 전달받았을 때 실행되는 onReject 함수를 인자로 받는다.&lt;/li&gt;
&lt;li&gt;then은 내부에서 반환하는 값을 가지는 &lt;strong&gt;프로미스&lt;/strong&gt;를 반환한다.&lt;/li&gt;
&lt;li&gt;그렇기 때문에 then은 또 다른 then으로 연결될 수 있다. (프로미스 체이닝)&lt;/li&gt;
&lt;li&gt;then은 반드시 반환값이 있어야 한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;예외 처리는 catch로&lt;/strong&gt;&lt;br&gt;
then에도 두번째 인자로 예외 처리 함수를 전달할 수 있지만 그렇게 되면&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;가독성에 좋지 않고&lt;/li&gt;
&lt;li&gt;then 안에서 예외가 발생했을 때 처리할 수 없다.&lt;br&gt;
그렇기 때문에 예외 처리는 catch로 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;in then&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// (건너뜀)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;in catch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// &apos;in catch&apos; Error: &apos;hi&apos;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;h2 id=&quot;프로미스-활용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%ED%99%9C%EC%9A%A9&quot; aria-label=&quot;프로미스 활용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로미스 활용&lt;/h2&gt;
&lt;h3 id=&quot;promisefinally&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#promisefinally&quot; aria-label=&quot;promisefinally permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promise.finally&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로미스 가장 마지막에 사용된다.&lt;/li&gt;
&lt;li&gt;이전의 사용된 프로미스의 값을 건드리지 않고 그대로 반환한다.&lt;/li&gt;
&lt;li&gt;ex) 데이터 요청의 성공, 실패 여부와 상관없이 서버에 로그를 보낼 때&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;promiseall&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#promiseall&quot; aria-label=&quot;promiseall permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promise.all&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;여러개의 프로미스를 &lt;strong&gt;병렬&lt;/strong&gt;로 처리할 때 사용&lt;/li&gt;
&lt;li&gt;병렬적으로 처리하고자 하는 프로미스를 배열 형태로 전달&lt;/li&gt;
&lt;li&gt;전달된 프로미스가 &lt;strong&gt;모두&lt;/strong&gt; 성공했을 때 fulfilled 상태의 프로미스 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;asyncFunc1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncFunc2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;data1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;promiserace&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#promiserace&quot; aria-label=&quot;promiserace permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Promise.race&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;전달받은 여러개의 프로미스 중 가장 빨리 완료된 프로미스를 반환&lt;/li&gt;
&lt;li&gt;하나라도 처리됨 상태(fulfilled || rejected)가 되면 처리됨 상태의 프로미스 반환&lt;/li&gt;
&lt;/ul&gt;
&lt;br /&gt;
&lt;h2 id=&quot;async-await&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#async-await&quot; aria-label=&quot;async await permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;async, await&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;then을 사용한 프로미스 체이닝 형식보다 가독성이 좋아진다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;프로미스를 완전히 대체하는 것은 아니다.&lt;/strong&gt;&lt;br&gt;
프로미스는 비동기 상태도 값으로 다룰 수 있기 때문에 프로미스가 더 큰 개념이다.&lt;/li&gt;
&lt;li&gt;프로미스는 객체로 존재, async, await는 함수에 적용되는 개념이다.&lt;/li&gt;
&lt;li&gt;async 를 사용한 함수는, 그 내부의 반환값을 가지는 프로미스를 반환한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;예외 처리는 try catch&lt;/strong&gt;&lt;br&gt;
try 안의 코드를 실행 후 예외가 발생하면 catch 안의 코드를 실행한다.&lt;/li&gt;
&lt;li&gt;비동기 함수를 병렬로 실행&lt;br&gt;
await를 사용하지 않고 프로미스를 먼저 생성 후, 그 다음에 await를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncFunc1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;aynscFunc2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;async, await는 thenable을 지원한다.&lt;br&gt;
thenable: 프로미스는 아니지만 then 메소드를 가진 객체&lt;br&gt;
async await 함수는 thenabel을 프로미스처럼 처리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; thenable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; test &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// undefined&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ayncFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; thenable&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 123&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;ayncFunc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[개발을 시작하게 된 계기]]></title><description><![CDATA[개발을 처음 알게 되고 자바스크립트를 시작으로 프론트엔드 개발을 공부한지 대략 1년이 다 되어간다. 지난 날을 되돌아보며 왜 개발을 시작하게 되었고, 그동안 뭘 배웠는지, 앞으론 어떤 개발자가 되고 싶은지 생각해보고자 한다. 🙃]]></description><link>https://yesl-kim.github.io//posts/motivation-to-be-a-developer</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/motivation-to-be-a-developer</guid><pubDate>Mon, 13 Jul 2020 12:36:13 GMT</pubDate><content:encoded>&lt;p&gt;개발을 처음 알게 되고 자바스크립트를 시작으로 프론트엔드 개발을 공부한지 대략 1년이 다 되어간다. 이제 본격적으로 취업 준비를 앞 둔 시점에서 지난 날을 되돌아보며 왜 개발을 시작하게 되었고, 그동안 뭘 배웠는지, 앞으론 어떤 개발자가 되고 싶은지 생각해보고자 한다. 🙃&lt;/p&gt;
&lt;p&gt;목차&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;개발자가 되겠다고 결정하기까지&lt;/li&gt;
&lt;li&gt;개발하면서 힘들었던 점&lt;/li&gt;
&lt;li&gt;개발하면서 좋았던 점&lt;/li&gt;
&lt;li&gt;5년 뒤의 나&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;개발자가-되겠다고-결정하기까지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B2%A0%EB%8B%A4%EA%B3%A0-%EA%B2%B0%EC%A0%95%ED%95%98%EA%B8%B0%EA%B9%8C%EC%A7%80&quot; aria-label=&quot;개발자가 되겠다고 결정하기까지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발자가 되겠다고 결정하기까지&lt;/h2&gt;
&lt;p&gt;개발도 아니고 코딩의 ㅋ을 접하게 된 계기는 대학 졸업 후 웹디자인을 공부하면서부터였다.&lt;/p&gt;
&lt;h3 id=&quot;난-원래-디자인이-하고-싶었어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%9C-%EC%9B%90%EB%9E%98-%EB%94%94%EC%9E%90%EC%9D%B8%EC%9D%B4-%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%97%88%EC%96%B4&quot; aria-label=&quot;난 원래 디자인이 하고 싶었어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;난 원래 디자인이 하고 싶었어&lt;/h3&gt;
&lt;p&gt;필자는 의류학과를 졸업했는데 대학을 마치고 웹디자인으로 관심을 돌린 이유는 간단했다. 디자인이 좋았고, 대학에서 텍스타일 디자인과 캐드, 통계학 등을 배우면서 컴퓨터로 작업하는 것이 좋았다. (전문가적인 느낌) 그리고 막연하게나마 그런 컴퓨터 툴을 익히는 데에 남들보다 조금은 능숙한 것 같다는 판단도 들었다.&lt;/p&gt;
&lt;p&gt;일단 경험을 해보고자 국비지원으로 ux, ui디자인 포트폴리오 과정을 수료했다. 해당 과정에는 웹퍼블리싱 과정도 포함되어있었는데 그때 접한 html, css가 디자인보다 더 잘 맞았던게 이 길의 첫 시작이었다.&lt;/p&gt;
&lt;p&gt;생각해보면 나는 관심분야보다는 작업의 프로세스가 나와 맞는지 안맞는지가 더 중요한 사람이었다. &lt;strong&gt;순간순간의 성취가 중요한 만큼 작은 단위의 목표가 나에게 맞았고, 목표와 해답에 대한 기준은 어느정도 명확하게 정해져 있어서 큰 틀 안에서 작업의 자유도가 보장되는 편이 내게 맞았다.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;부트캠프에-들어가다&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%80%ED%8A%B8%EC%BA%A0%ED%94%84%EC%97%90-%EB%93%A4%EC%96%B4%EA%B0%80%EB%8B%A4&quot; aria-label=&quot;부트캠프에 들어가다 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부트캠프에 들어가다&lt;/h3&gt;
&lt;p&gt;그 뒤로 혼자 자바스크립트 공부를 하고 간단한 웹사이트 외주를 맡아보면서 이 길에 확신이 듬과 동시에 실생활에서 필요로 하는 기능을 구현하기에는 내 실력이 너무 부족하다는 것을 깨달았다. 외주를 맡을수록 기업에서 요구하는 기능을 내 성장속도가 따라가질 못했다. (🥲) 더 많이 배우고 싶었고 더 깊이 배우고 싶었다. 그렇게 부트캠프에 등록하게 되었다.&lt;/p&gt;
&lt;p&gt;부트캠프는 총 3달간 진행되었고, 그 기간동안 동기들과 두 번의 팀 프로젝트와 기업 인턴십을 통해 밀도있는 경험을 할 수 있었다.&lt;/p&gt;
&lt;p&gt;처음엔 괜히 긴장도 되고 걱정도 되었는데, 그랬던 시간이 생각도 안날만큼 지난 3달은 정말 재밌었다..! 슬랙을 이용한 소통부터 깃, 트렐로를 사용한 협업방식, 새로운 기술들까지 모든게 새로웠지만 점점 그 안에서 효율성을 맛보는 것이 짜릿했다. 여러 훌륭한 동기들(🤍) 과 같이 공부를 하니 자극도 되고, 빠른 기간 안에 많은 새로운 기술을 접하고 소화하다보니 &lt;strong&gt;새로운 기술에 대한 두려움이 없어졌다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;한달 안에 리액트를 익혀서 웹사이트 두 개를 완성하고, 다음 한달동안 리액트 네이티브를 익혀서 앱을 구현했다. &lt;del&gt;완성은 못했지만&lt;/del&gt; 이 과정을 통해 결국 내가 봐야할 건 공식문서라는 사실과, 결국은 그걸 읽고 있는 나를 발견했다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;그리고 짧은 시간 안에 정해진 기능을 모두 구현해야 한다는 압박감. 그 속에서 꿋꿋이 나의 길을 가는 법도..?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;사실 개발을 하는 것보다 이런 심리적 압박감에 조급해질 때가 가장 힘들지 않았을까. 문제가 잘 풀리지 않을 때는 원래 잠시 산책을 하며 머리를 식히는 편이지만 사실 정말 조급할 때는 산책해도 도움이 되지 않았다. 이럴 때 머리로만 생각하지 않고 노트에 로직을 작은 단위로 적어보는 것이 도움이 되었다. (기본적인 얘기지만..)&lt;/p&gt;
&lt;p&gt;지금 돌이켜보면서 드는 생각은&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“결국 정말 되네”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“앞으로도 당장 앞에 놓인 문제들은 커보일지 모르겠지만 하나씩 쪼개고 하나씩 풀어나가다 보면 어느새 문제는 뒤에 있겠지.” (내겐 구글과 커뮤니티가 있다!)&lt;/p&gt;
&lt;p&gt;부트캠프를 통해 얻은 가장 큰 것은 다름아니라 그런 마음가짐이지 않을까.&lt;/p&gt;
&lt;h2 id=&quot;개발하면서-어려웠던-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B4%EC%84%9C-%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;개발하면서 어려웠던 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발하면서 어려웠던 점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;기록하는 습관&lt;/strong&gt;&lt;br&gt;
기술 블로그와 TIL.&lt;/p&gt;
&lt;p&gt;개발을 하면서 알게된 개발 문화 중 가장 신선했던 부분이다. 동시에 실천하기 가장 어려웠던 부분이기도 하다. 알게 된 것, 생각했던 것을 막상 글로 쓰려고 하니 모호하고 정리가 안되는 부분이 많이 글을 쓰는 데 시간이 꽤 걸렸다. 그래서 점점 시작이 어려워졌던 것 같다.&lt;/p&gt;
&lt;p&gt;요즘은 그래서 평소에는 느꼈던 것, 알게 된 것을 개인 md파일로 간단하게 메모한 뒤, 블로그에 쓸 글은 여러 날에 걸쳐 조금씩 정리를 한다. (물론 그래서 발행까지 시간은 걸리지만 😅) 그랬을 때 체감상 하루에 글을 쓰는 시간이 줄기 때문에 부담도 줄었다. 지금은 이렇게 거창하지 않더라도, 아주 정리된 글이 아니더라도 기록하는 습관을 먼저 들이는 중이다.&lt;/p&gt;
&lt;h2 id=&quot;개발하면서-좋았던-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%ED%95%98%EB%A9%B4%EC%84%9C-%EC%A2%8B%EC%95%98%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;개발하면서 좋았던 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발하면서 좋았던 점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;사용자와 상호작용할 수 있다는 것&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;처음 코딩을 접했을 때 동적 효과를 입히는 것만으로도 신기하고 재밌었지만 2D의 디자인이 더이상 화면 안에만 있는 것이 아니라 무한한 확장성을 갖게 되는 것이 매력적이었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;개인의 성장&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;우선 개발을 하면서, 알아가는 기쁨이 좋았다. 전에 몰랐던 원리, 코드, 기능, 효율적인 방법 등을 알게 될 때 성장했다고 느꼈다.&lt;/p&gt;
&lt;p&gt;필자는 삶에서 가장 중요한 키워드 중에 하나를 꼽으라면 성장이라고 말하고 싶다. 조금 돌아가더라도, 조금은 엎어지더라도 거기서 배우는 게 있으면 괜찮다는 것이 필자의 생각.&lt;/p&gt;
&lt;p&gt;개발 분야에서는 특히나 개인의 성장을 도모하고 추구하는 분위기같다. 기술 트렌드가 빠르게 변하는 업종 특성상 성장은 어쩌면 개인의 가치관과 무관하게 필수일지 모르겠다. 하지만 그래도 ‘꾸준한 성장’에 동의하는 사람들과 같이 일하고 싶었다. 이 속에서 나도 같은 문화를 만들며 성장하고 싶었다.&lt;/p&gt;
&lt;p&gt;이 업종에서는 회사 프로젝트에 종속되는 것이 아니라 개인의 성장과 회사 일이 병행될 수 있겠다는 생각이 들었다.&lt;/p&gt;
&lt;h2 id=&quot;5년-뒤의-나&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#5%EB%85%84-%EB%92%A4%EC%9D%98-%EB%82%98&quot; aria-label=&quot;5년 뒤의 나 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5년 뒤의 나&lt;/h2&gt;
&lt;p&gt;우선 계속 개발을 하고 싶다.&lt;/p&gt;
&lt;p&gt;사소하지만 소홀히 하기 쉬운 것들을 꾸준히 하며 꾸준히 개발을 하고 싶다.&lt;/p&gt;
&lt;p&gt;결국은 사람을 이롭게 하는 개발자가 되고 싶고, 그런 사람이 되고 싶다. 함께 일하는 동료이든, 내가 만든 앱을 사용하는 사용자이든, 결국은 나로 인해 누군가의 삶을 조금이라도 편하게 만들 수 있다면 좋겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[쿼리스트링 파싱 함수]]></title><description><![CDATA[watta taxi 프로젝트를 하며 알게 된 쿼리스트링 파싱 함수를 정리해보자.]]></description><link>https://yesl-kim.github.io//posts/watta-taxi-code/1</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/watta-taxi-code/1</guid><pubDate>Sun, 07 Jun 2020 06:39:00 GMT</pubDate><content:encoded>&lt;p&gt;이번 프로젝트에서 검색, 필터, 정렬 기능을 위해 쿼리 파라미터를 사용해 api요청을 한 일이 있었다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;path parameter vs query parameter&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이 둘은 모두 동적 라우팅을 위해 사용되지만, 패스 파라미터는 특정 리소스 하나를 지정해서 가져오는 경우에 주로 쓰이고 쿼리 파라미터는 페이지네이션이나 필터처럼 기준에 따라 리소스의 일부를 가져올 때 주로 쓰인다.&lt;/p&gt;
&lt;p&gt;패스 파라미터는 match.params의 프로퍼티로 담기기 때문에 각각의 값에 접근이 쉽지만, 지정된 파라미터에 값을 모두 전달하지 않으면 (예를 들어 category/:id/:example -&gt; id와 example에 둘다 값을 전달하지 않으면) 라우팅이 올바르게 되지 않는다. 그래서 필터를 쓸 때는 쿼리 파라미터를 쓰는 것 같다. (필터를 체크할 수도 있고 안할 수도 있고~)&lt;/p&gt;
&lt;p&gt;다만 쿼리 파라미터는 location.search에 문자열로 한번에 다 담기기 때문에(‘?key=value&amp;#x26;key2=value2…‘) 각각의 값에 접근하기 위해서는 따로 분리를 해줘야한다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;프론트에서는 쿼리스트링을 객체로 변환해서 key값으로 사용하다가, 서버에 보내야 할 때 다시 쿼리스트링 형태(‘?&lt;del&gt;=&lt;/del&gt;&amp;#x26;~~“)로 보내주면 된다. 그래서 쿼리스트링 -&gt; 객체, 객체 -&gt; 쿼리스트링 으로 변환해주는 함수를 util 함수에 저장해놓고 필요할 때 꺼내쓰면 함수 재사용도 높이고, 추상화를 통해 코드 길이도 줄이고! 아주 편했기에 다시 한 번 정리해보고자 한다.&lt;/p&gt;
&lt;p&gt;방법은 1. 직접 함수를 만들거나 2. Web API인 &lt;code class=&quot;language-text&quot;&gt;URLSearchParams&lt;/code&gt;를 사용하는 방법이 있다.&lt;/p&gt;
&lt;h2 id=&quot;직접-함수-작성하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%81%EC%A0%91-%ED%95%A8%EC%88%98-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;직접 함수 작성하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;직접 함수 작성하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// util.js&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;queryToObj&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; q&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  q&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; obj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;objToQuery&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;?&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
    Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; el&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로토타입을 사용해서 메소드로 만들어 사용할 수 있는데 그건 &lt;a href=&quot;https://saengmotmi.netlify.app/mentoring/2020-10-31-%EC%BF%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A7%81-%ED%8C%8C%EC%8B%B1-%ED%95%A8%EC%88%98/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;요기&lt;/a&gt; 참고&lt;br&gt;
파싱 함수를 사용할 수도 있다는 걸 알려주신, 멘토님의 블로그다.&lt;/p&gt;
&lt;br/&gt;
&lt;h2 id=&quot;web-api-사용하기-urlsearchparams&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#web-api-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-urlsearchparams&quot; aria-label=&quot;web api 사용하기 urlsearchparams permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Web API 사용하기: &lt;code class=&quot;language-text&quot;&gt;URLSearchParams&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;new URLSearchParams(&lt;em&gt;queryString&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;쿼리스트링을 인자로 넘겨주면 URLSearchParams 객체 인스턴스 반환&lt;/li&gt;
&lt;li&gt;쿼리스트링에 대해 작업할 수 있는 메소드 제공&lt;br&gt;
각 파라미터의 값을 조회, 수정, 삭제&lt;br&gt;
문자열로 변환 등등&lt;/li&gt;
&lt;li&gt;문자열 앞의 ’?’는 자동으로 제거됨&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// url이 아닌 &quot;쿼리스트링&quot;을 인자로 전달해야 한다&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; params &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;URLSearchParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;location&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_key_&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 조회&lt;/span&gt;
params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_key_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _value_&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 수정&lt;/span&gt;
params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;_key_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _value_&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 추가&lt;/span&gt;
params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;URLSearchParams&lt;/code&gt;의 메소드를 사용하면 따로 객체로 변환하는 함수를 만들지 않아도 쉽게 파라미터의 값을 읽고 수정할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;하나의 파라미터가 다수의 값을 갖는 경우 모든 값이 보존된다는 점이 좋은 것 같다.&lt;/strong&gt; 객체는 같은 이름의 파라미터가 중복될 수 없기 때문에&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Watta: Taxi 후기]]></title><description><![CDATA[한강 주변 수상택시 예약 사이트, watta: taxi 프로젝트 회고록]]></description><link>https://yesl-kim.github.io//posts/watta-taxi</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/watta-taxi</guid><pubDate>Sat, 06 Jun 2020 06:39:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;description&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#description&quot; aria-label=&quot;description permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Description.&lt;/h2&gt;
&lt;p&gt;한강 주변 수상택시를 검색, 예약할 수 있는 웹 사이트&lt;br&gt;
이용한 택시 기사님 평점, 댓글 추가 가능&lt;/p&gt;
&lt;h3 id=&quot;memebers&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#memebers&quot; aria-label=&quot;memebers permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Memebers&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;FE&lt;/strong&gt; | 김예슬, 윤세용, 이다슬, 최원근,&lt;br&gt;
&lt;strong&gt;BE&lt;/strong&gt; | 박은혜, 양영건&lt;/p&gt;
&lt;h3 id=&quot;implementation-what-i-did-️&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#implementation-what-i-did-%EF%B8%8F&quot; aria-label=&quot;implementation what i did ️ permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Implementation (What I did ✔️)&lt;/h3&gt;
&lt;p&gt;카카오 로그인 및 회원가입&lt;br&gt;
슬라이드, 동적 라우팅&lt;br&gt;
달력에서 특정날짜, 기간 선택 ✔️&lt;br&gt;
특정 승강장, 날짜, 승객인원 및 좌석타입에 따른 티켓 검색 ✔️&lt;br&gt;
택시회사, 가격, 출발시간에 따른 티켓 필터, 정렬 ✔️&lt;br&gt;
티켓 예약, 예약 확인 ✔️&lt;br&gt;
이용한 택시 기사님 평점, 댓글 기능&lt;br&gt;
로딩 페이지 ✔️&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;잘했던-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%98%ED%96%88%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;잘했던 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;잘했던 점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;우선 순위에 따른 일정 관리&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;두번째 팀 프로젝트여서 그런지 확실히 다함께 역할을 분배하는 부분은 수월했다. (첫 프로젝트 때는 컴포넌트나 페이지를 어떻게 나눌지도 고민이 됐던 기억이 있다.)
매 스프린트마다 팀원끼리 진행상황을 공유하고 &lt;strong&gt;우선순위에 따라 (전체 프로젝트를 위해, 메인 서비스를 중심으로 한 사이클을 돌 수 있도록)&lt;/strong&gt; 각자의 역할을 그때그때 조율했다.&lt;/p&gt;
&lt;p&gt;그 결과 추가기능은 구현하지 못했지만 기한 안에 메인 서비스는 모두 완성할 수 있었다.&lt;/p&gt;
&lt;h2 id=&quot;아쉬운-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90&quot; aria-label=&quot;아쉬운 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아쉬운 점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;상태관리&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;검색, 필터 항목에 대한 상태값을 컴포넌트끼리 공유해야 할 일이 많았는데, 이를 모두 props를 내려주는 것으로 해결했다. 이때 &lt;code class=&quot;language-text&quot;&gt;useContext&lt;/code&gt;를 쓰면 좋을 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;util 함수의 관심사 분리&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;이번에 프로젝트 내에서 재사용 가능한 함수들(쿼리스트링 파싱 함수나 날짜를 일정 포맷으로 변환하는 함수, 객체가 빈 값인지 검사하는 함수 등)은 util.js 파일에 놓고 import해서 사용했다-. 하지만 프로젝트 끝나고 보니 이런 함수도 관심사에 따라 파일로 분리하면 관리하기 더 용이할 것 같다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;페이지별로 공통된 컴포넌트를 렌더하는 Layout 컴포넌트&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;페이지 별로 모두 공통된 컴포넌트를 가지면 참 좋겠지만, 페이지별로 공통된 요소는 갖지만 일부 페이지에서 해당 요소를 불러오지 않는 경우가 있다. 이 때문에 이번 프로젝트에서 시간 관계상 다수의 페이지에서 공통된 컴포넌트를 매번 렌더하도록 코드를 작성하였다.&lt;/p&gt;
&lt;p&gt;프로젝트가 끝난 뒤 페이지 경로에 따라 공통 컴포넌트를 조건부 렌더링하는 Layout 컴포넌트를 만들 수 있다는 걸 알았다. 이 부분을 나중에 리팩토링하면 좋을 것 같다.&lt;/p&gt;
&lt;h2 id=&quot;소감&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EA%B0%90&quot; aria-label=&quot;소감 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소감&lt;/h2&gt;
&lt;h3 id=&quot;scss-vs-styled-component&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#scss-vs-styled-component&quot; aria-label=&quot;scss vs styled component permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SCSS vs Styled-component&lt;/h3&gt;
&lt;p&gt;위케아 프로젝트 때는 scss를 써봤다면 이번엔 styled-component를 써보았다.&lt;/p&gt;
&lt;p&gt;scss의 장점 중 하나는 nesting 기능 때문에 SPA에서 클래스명이 중복되는 것을 “어느 정도” 막아준다는 장점이 있지만, 그래도 여전히 중복되는 클래스명이 생겼다. 반면 styled-component는 그런 문제로부터 완전히 자유롭다. 그리고 컴포넌트와 관련 스타일이 한 파일로 묶이기 때문에 유지보수가 쉽다는 장점이 있다.&lt;/p&gt;
&lt;p&gt;사용해본 결과, 가장 좋았던 점은 styled-component 이름처럼 정말 컴포넌트처럼 사용할 수 있다는 점이었다.&lt;/p&gt;
&lt;p&gt;크게 공통된 스타일을 가지고 있으면서 부분부분 달라지는 요소를 모두 클래스명으로 제어하는 것이 아니라 &lt;strong&gt;컴포넌트처럼 props로 넘겨주면 그 안에서 props에 따라 다른 스타일을 적용할 수 있다.&lt;/strong&gt; 그리고 &lt;strong&gt;클래스명이 아닌 변수로 선언&lt;/strong&gt;하여 사용하기 때문에 코드가 깔끔하다. (className=”~“부분이 사라짐)&lt;/p&gt;
&lt;p&gt;아래는 프로젝트 하면서 스타일 컴포넌트로 탭버튼을 구현한 부분이다. 사소하지만 특정값에 따라 스타일이 변경되는 로직이 스타일 컴포넌트 내부로 포함되어 컴포넌트는 오히려 깔끔해지는 걸 볼 수 있었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TabBtn clicked&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isRoundTrip&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;왕복&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;TabBtn&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; TabBtn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;li&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
  ... &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; clicked &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;
      clicked &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      css&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;
        ...
      &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;scss로 한다면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Search&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;li
      className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isRoundTrip &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tabBtn clicked&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tabBtn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      왕복
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;li&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scss&quot;&gt;&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.tabBtn &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token selector&quot;&gt;.clicked &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;클래스형-vs-함수형-컴포넌트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-vs-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8&quot; aria-label=&quot;클래스형 vs 함수형 컴포넌트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스형 vs 함수형 컴포넌트&lt;/h3&gt;
&lt;p&gt;이건 정말 혁명이었다. 처음에는 클래스형을 쓸 때 큰 불편함을 못 느낀 만큼, (클래스가 발생시킬 수 있는 여러 버그를 아직 만나보지 못했다.) 함수형에 편리함이 와닿지 않았다.&lt;/p&gt;
&lt;p&gt;하지만 일단 render함수를 비롯해서 contructor, this가 필요하지 않고, 인자로 받아온 props를 바로 구조분해할당하여 사용할 수 있다는 것만으로도 (여러 곳에서 다시 구조분해할당할 필요도 없고) 코드가 눈에 띄게 깔끔해지는 것을 볼 수 있었고. 쓸수록, state가 하나의 객체 안에 네스팅되지 않다는 점, 라이프사이클 메소드(컴디마, 컴디업, 컴디언마)를 useEffect 하나로 쓸 수 있다는 점이 편리했다. (더 많은 장점이 있겠지만!)&lt;/p&gt;
&lt;h3 id=&quot;지극히-개인적인-회고&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EA%B7%B9%ED%9E%88-%EA%B0%9C%EC%9D%B8%EC%A0%81%EC%9D%B8-%ED%9A%8C%EA%B3%A0&quot; aria-label=&quot;지극히 개인적인 회고 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지극히 개인적인 회고&lt;/h3&gt;
&lt;p&gt;두번째여서 그럴까 팀원들과 아주 많이 친해지고 편해지고 덕분에 빠듯한 일정에도 누구하나 포기하지 않고 시너지를 낼 수 있었던 것 같다.&lt;/p&gt;
&lt;p&gt;배달의 민족에서 ‘잡담이 경쟁력이다’라고 한다던데, 왜 경쟁력인지 조금이라도 맛본 프로젝트가 아니었을까. 서로 우선 사람 대 사람으로 친해지니 그 후엔 어떤 의견도 솔직하게 말할 수 있었고, 체력적으로 힘들고 마음이 조급해져도 분위기가 안좋았던 적은 한번도 없었다. 개인적으로 정말 재밌고 만족스러운 프로젝트였다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[WIKEA 후기]]></title><description><![CDATA[인테리어 가구 쇼핑몰, 위케아 프로젝트 회고록]]></description><link>https://yesl-kim.github.io//posts/wikea</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/wikea</guid><pubDate>Fri, 22 May 2020 10:31:00 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Members&lt;/strong&gt;&lt;br&gt;
프론트: 노선경, 김수연, 김예슬, 안정현 (4)&lt;br&gt;
백: 정운산, 최우석 (2)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;프로젝트 소개&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인테리어 가구, 소품을 판매하는 사이트&lt;/li&gt;
&lt;li&gt;카테고리, 신제품, 가격, 색상 등에 따라 상품을 볼 수 있는 필터 기능을 제공&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;프로젝트 계획 및 일정&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1st Sprint : 전체 레이아웃, 컴포넌트화&lt;/li&gt;
&lt;li&gt;2nd Sprint : 컴포넌트 별 기능 구현, 프론트-백 통신, conflict 수정 작업&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;구현한 기능&lt;/strong&gt; (내가 기여한 기능 ✔️)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자체 로그인, 회원가입&lt;/li&gt;
&lt;li&gt;메인 네비게이션 탭 GNB ✔️&lt;/li&gt;
&lt;li&gt;메인페이지 반응형 ✔️&lt;/li&gt;
&lt;li&gt;상품 필터, 정렬&lt;/li&gt;
&lt;li&gt;페이지네이션&lt;/li&gt;
&lt;li&gt;사이드 모달 ✔️&lt;/li&gt;
&lt;li&gt;헤더 스크롤 애니메이션&lt;/li&gt;
&lt;li&gt;상세 페이지 이미지 슬라이드&lt;/li&gt;
&lt;li&gt;페이지별 동적 라우팅 ✔️&lt;/li&gt;
&lt;li&gt;REST API로 카테고리, 제품 데이터 통신 ✔️&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;기억에-남는-로직코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%96%B5%EC%97%90-%EB%82%A8%EB%8A%94-%EB%A1%9C%EC%A7%81%EC%BD%94%EB%93%9C&quot; aria-label=&quot;기억에 남는 로직코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기억에 남는 로직/코드&lt;/h2&gt;
&lt;h3 id=&quot;configjs--api-주소-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#configjs--api-%EC%A3%BC%EC%86%8C-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;configjs  api 주소 관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;config.js : API 주소 관리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;API 주소를 변수로 지정하고 파일을 따로 분리하면 ip주소가 바뀔 때에 관리 용이&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/93d22849-0fb0-4e0c-82d7-4cfccd57e6fa/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-21%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%2012.37.25.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;h3 id=&quot;메인-페이지--호버된-아이템만-보이기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%9D%B8-%ED%8E%98%EC%9D%B4%EC%A7%80--%ED%98%B8%EB%B2%84%EB%90%9C-%EC%95%84%EC%9D%B4%ED%85%9C%EB%A7%8C-%EB%B3%B4%EC%9D%B4%EA%B8%B0&quot; aria-label=&quot;메인 페이지  호버된 아이템만 보이기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메인 페이지 : 호버된 아이템만 보이기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;아이템 개수만큼 열림 닫힘 상태값(boolean)을 배열에 저장&lt;/li&gt;
&lt;li&gt;아이템의 인덱스를 인자로 받아 해당 인덱스의 상태값은 true로, 외의 상태값은 false로 바꾸는 함수 &lt;code class=&quot;language-text&quot;&gt;handleLabelOn&lt;/code&gt; 선언&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라벨 버튼에 마우스 호버시 함수 &lt;code class=&quot;language-text&quot;&gt;handleLabelOn&lt;/code&gt; 에 해당 인덱스를 전달, 신제품 배경이미지에서 마우스가 벗어났을 시 &lt;code class=&quot;language-text&quot;&gt;handleLabelOn(0)&lt;/code&gt; 호출&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/fac6f9ca-a1c7-4214-b4fa-e0dea6916bd5/%E1%84%86%E1%85%A6%E1%84%8B%E1%85%B5%E1%86%AB-%E1%84%92%E1%85%A9%E1%84%87%E1%85%A5.gif&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/d731271d-4f11-46ae-b55a-1ca599ff5878/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-21%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.22.53.png&quot;&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/bb5ce3b0-6570-49c5-8942-611f3c126f39/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-21%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%201.24.08.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;h3 id=&quot;회원가입-페이지--핸드폰-번호-형식-변경&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%9A%8C%EC%9B%90%EA%B0%80%EC%9E%85-%ED%8E%98%EC%9D%B4%EC%A7%80--%ED%95%B8%EB%93%9C%ED%8F%B0-%EB%B2%88%ED%98%B8-%ED%98%95%EC%8B%9D-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;회원가입 페이지  핸드폰 번호 형식 변경 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;회원가입 페이지 : 핸드폰 번호 형식 변경&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;-&lt;/code&gt; 을 포함하여 핸드폰 번호를 입력한 경우 &lt;code class=&quot;language-text&quot;&gt;onBlur&lt;/code&gt;이벤트를 사용하여 핸드폰 번호 형식 변경하는 함수 호출&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/5dea2c0b-3be6-48a4-9527-d829807ad075/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-21%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.59.11.png&quot;&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/47f2333a-d8e8-491e-88f2-018e40d58bfd/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-21%20%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB%2011.58.39.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;h3 id=&quot;제품-이미지-슬라이드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%ED%92%88-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%8A%AC%EB%9D%BC%EC%9D%B4%EB%93%9C&quot; aria-label=&quot;제품 이미지 슬라이드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제품 이미지 슬라이드&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/92799ddb-978a-4aa9-a851-0c0337b2e707/%E1%84%89%E1%85%A1%E1%86%BC%E1%84%89%E1%85%A6-%20%E1%84%8B%E1%85%B5%E1%84%86%E1%85%B5%E1%84%8C%E1%85%B5%20%E1%84%86%E1%85%A9%E1%84%83%E1%85%A1%E1%86%AF.gif&quot;&gt;
&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/d451917f-455d-46f2-94ed-628f70ef0c0b/%E1%84%89%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%83%E1%85%A5%20%E1%84%87%E1%85%A5%E1%84%90%E1%85%B3%E1%86%AB%20%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE.png&quot;&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/b33209c4-319b-41cc-87dd-cd58a71732fc/%E1%84%89%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%83%E1%85%A5-%E1%84%8B%E1%85%B5%E1%84%86%E1%85%B5%E1%84%8C%E1%85%B5%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%B3%E1%84%86%E1%85%A1%E1%86%AB%E1%84%8F%E1%85%B3%E1%86%B7%20%E1%84%82%E1%85%A5%E1%86%B7%E1%84%8B%E1%85%A5%E1%84%80%E1%85%A1%E1%84%80%E1%85%B5.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;잘했던-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%98%ED%96%88%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;잘했던 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;잘했던 점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SCSS 활용&lt;/strong&gt;
scss를 사용해보는 첫 프로젝트였다. nesting 기능을 넘어 mixin, if, 변수 지정 등 다양한 기능을 사용해볼 수 있었다. break point를 정할 때 변수로 지정하고 그리드 시스템을 적용할 때 if문으로 칼럼의 너비를 계산할 수 있었다. css를 js처럼 ✨&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/79d8576e-aabf-4bbe-aba6-8d8443b272b7/sass%20if%E1%84%86%E1%85%AE%E1%86%AB%20%E1%84%89%E1%85%A1%E1%84%8B%E1%85%AD%E1%86%BC%E1%84%8B%E1%85%A8.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;같은 개발자끼리의 협업을 고민해 보는 시간&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;소통이라고 하면, 프론트와 백엔드끼리의 소통이 제일 중요하다고 생각했지만 첫 주에는 프론트끼리도 소통해야 할 일이 굉장히 많았다. 공용 컴포넌트를 나누는 것도, 역할 분담을 마치고 컴포넌트를 만드는 것도 절대 혼자만의 일이 아니었다. 컴포넌트를 만들 때부터 서로 “이 부분은 이렇게 할게요~ 이렇게 했으니 이건 꼭 지켜주셔야 해요~” 등의 얘기가 자주 오갔고, 자연스럽게 컴포넌트 문서화에 이르렀다. &lt;del&gt;리뷰어의 칭찬도 받으니 기분까지 좋은 건 덤이었다.&lt;/del&gt; 알고 보니 실무에서도 협업을 위해 문서화를 진행하는 일이 많다고.&lt;/p&gt;
&lt;p&gt;백엔드와도 처음에는 사소한 단어(배열=리스트, 객체=딕셔너리) 차이로 서로 어리둥절한 일이 많았다. 데이터도 백엔드에게 받기만 하는 것이 아니라 구조를 분명히 요구해야하는 부분도 있었다.&lt;/p&gt;
&lt;p&gt;코드치는 시간보다 팀원들끼리 의견을 조율하고 맞추는 시간이 생각보다 더 많았는데 사소한 문제에도 불편해하는 기색없이 적극적으로 소통해주고 같이 고민해준 팀원들에게 참 고맙다!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/dfde2d3f-9e64-4ba6-8046-56c826bd8b08/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202021-05-22%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%207.38.34.png&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;아쉬웠던-점&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%95%84%EC%89%AC%EC%9B%A0%EB%8D%98-%EC%A0%90&quot; aria-label=&quot;아쉬웠던 점 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;아쉬웠던 점&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;추가 기능 구현&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;끝내 완료하지 못한 추가기능들이 아쉬움으로 남는다. (장바구니, 위시리스트 등등) 단순히 기능을 구현하지 못했다는 것보다 ‘거기서 오는 배움의 과정을 느껴볼 기회가 더 있었을 텐데-’ 하는 이유에..&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;우선순위 정하기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2주차에는 생각보다 작은 스타일, 수정 작업에 할애하는 시간이 많았다. 계획을 세울 때 목표는 있었지만 우선순위를 제대로 세우지 않아서 진행 중인 작업의 관련 작업이 생겼을 때 추가기능이 계속 미뤄지게 된 게 아닐까 생각한다. 다음을 위해 기억하자, 구체적이고 작은 일 단위로 쪼갠 뒤 우선순위 정하기!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;소감&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EA%B0%90&quot; aria-label=&quot;소감 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소감&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;기술적 소감&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/fa0o00/post/99c7a40b-906b-40eb-b15e-fcfed0b06e8d/iOS%20%E1%84%8B%E1%85%B5%E1%84%86%E1%85%B5%E1%84%8C%E1%85%B5.jpg&quot;&gt;
내가 구현한 코드가 최선이라고 생각하지 않는다. 오히려 아직도 다시 보면 아쉬움이 많이 남지만 이건 과정이니까, 하며 스스로를 다독이고 있다. 하지만 기존 웹사이트를 구조 면에서나, 기능을 구현하는 로직 면에서나 그대로 따라하지 않고 &lt;del&gt;물론 그대로 따라할 수도 없지만&lt;/del&gt; &lt;strong&gt;내가 생각하기에 합당한 이유에 따라 다르게 코드를 작성했다는 점에서 만족도가 높다. 기존의 코드를 참고하고 왜 이렇게 짰을까 생각해보고 보다 좋은 방법을 고민해보는 시간이 참 재밌었고&lt;/strong&gt; (정말정말정말) &lt;strong&gt;또 시간이 지나도 계속 기억에 남아있는 것은 그런 과정들이었다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;물론 질적인 고민의 시간을 양적으로도 많이 가져가기에 2주란 시간은 짧았고, 다음 프로젝트 때에는 (기업협업을 위한 이력서 작성 등등으로 인해서) 시간이 더욱 없을테지만 그래도, 다음 프로젝트 때에는 시맨틱 측면에서, 가독성 측면에서, 컴포넌트 재사용 측면에서 등등 좀 더 좋은 코드를 작성하기 위해 고민하고 알아가는 순간이 더 많이 왔으면 좋겠다. 정말, 부지런해야겠다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[정규표현식: 전역플랙그와 test(), exec()의 lastIndex속성]]></title><description><![CDATA[test()와 exec()를 전역플래그와 함께 사용했을 때 나타나는 문제]]></description><link>https://yesl-kim.github.io//posts/regexp</link><guid isPermaLink="false">https://yesl-kim.github.io//posts/regexp</guid><pubDate>Sat, 11 Apr 2020 10:31:00 GMT</pubDate><content:encoded>&lt;p&gt;정규표현식을 공부하면서 여러 예제를 만들어보던 도중 오류가 발생했다. 이유는 다음 메소드에서 전역 플래그를 사용할 경우 lastIndex 속성을 업데이트하기 때문이었다. 이번에 접한 오류에 대해 정리해보고자 한다.&lt;/p&gt;
&lt;h3 id=&quot;question&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#question&quot; aria-label=&quot;question permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Question&lt;/h3&gt;
&lt;p&gt;‘who’를 포함하거나 포함하지 않는 여러 문자열을 만들고, 정규식을 사용해서 문자열 중에 &lt;strong&gt;‘who’와 일치하는 부분만 배열로 반환&lt;/strong&gt;하는 코드를 작성해보았다. 그런데 정규식 &lt;code class=&quot;language-text&quot;&gt;/who/&lt;/code&gt; 를 사용한 코드와 &lt;code class=&quot;language-text&quot;&gt;/who/g&lt;/code&gt; 를 사용한 코드의 결과가 다르게 나타났다.&lt;/p&gt;
&lt;p&gt;문자열 &lt;code class=&quot;language-text&quot;&gt;&apos;who is it&apos;&lt;/code&gt; 이 정규식 &lt;code class=&quot;language-text&quot;&gt;/who/g&lt;/code&gt; 에서는 검색이 되지 않았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; tgStrs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;who is who&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;who is it&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;it is who&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;what is it&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;what who what&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; regExp_g &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; passedStrs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tgStrs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; regExp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; passedStrs_g &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; tgStrs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; regExp_g&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 정규표현식 /who/를 사용한 결과&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passedStrs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/*
(4) [&quot;who is who&quot;, &quot;who is it&quot;, &quot;it is who&quot;, &quot;what who what&quot;]
0: &quot;who is who&quot;
1: &quot;who is it&quot;
2: &quot;it is who&quot;
3: &quot;what who what&quot;
*/&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 정규표현식 /who/g를 사용한 결과&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &apos;who is it&apos;이 매칭되지 않음&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;passedStrs_g&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/*
(3) [&quot;who is who&quot;, &quot;it is who&quot;, &quot;what who what&quot;]
0: &quot;who is who&quot;
1: &quot;it is who&quot;
2: &quot;what who what&quot;
*/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;answer&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#answer&quot; aria-label=&quot;answer permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Answer&lt;/h3&gt;
&lt;p&gt;이유는 &lt;code class=&quot;language-text&quot;&gt;test()&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;lastIndex&lt;/code&gt; 속성 때문이었다. 이러한 점은 &lt;code class=&quot;language-text&quot;&gt;exec()&lt;/code&gt; 메소드에서도 마찬가지이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;/who/g&lt;/code&gt; 처럼 &lt;code class=&quot;language-text&quot;&gt;.test()&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;.exec()&lt;/code&gt; 메소드에서 전역 플래그를 사용하는 경우 메소드는 문자열을 검색한 후 그것의 위치를 &lt;code class=&quot;language-text&quot;&gt;lastIndex&lt;/code&gt; 속성에 저장한다. 다음 타깃 문자열을 검색할 때는 (이전과 다른 문자열이어도) 저장된 &lt;code class=&quot;language-text&quot;&gt;lastIndex&lt;/code&gt;의 위치에서부터 검색을 시작한다.
메소드가 &lt;code class=&quot;language-text&quot;&gt;true&lt;/code&gt;를 반환하면 &lt;code class=&quot;language-text&quot;&gt;lastIndex&lt;/code&gt;는 검색된 위치값만큼 계속 증가하고 &lt;code class=&quot;language-text&quot;&gt;false&lt;/code&gt;나 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;를 반환하면 &lt;code class=&quot;language-text&quot;&gt;0&lt;/code&gt;이 된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;MDN | 전역 플래그와 test()&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>